from abc import ABC, abstractmethod
class Automata(ABC):
    '''Objeto Automata (abstracto)

    Atributos:
        - estados (list): Lista de estados del automata
        - symbols (list): Alfabeto del automata
        - initial (int): Estado inicial del automata
        - transitions (dict): transiciones del automata
    '''

    def __init__(self) -> None:
        self.estados: list = None
        self.symbols: list = None
        self.initial: int = None
        self.transitions: dict = None

    def move(self, state: int, symbol: str) -> list | int:
        tran = (state, symbol)
        if tran not in self.transitions.keys():
            return None

        return self.transitions[tran]


    @abstractmethod
    def simulate(self, c: str) -> bool: pass

    def __repr__(self) -> str:
        return f'''
        Estados: {self.estados}
        Simbolos: {self.symbols}
        transitions: {self.transitions}
        Initial: {self.initial}
        '''
class AFD(Automata):
    '''Objeto Automata finito determinista

    Atributos:
        - estados (list): Lista de estados del automata
        - symbols (list): Alfabeto del automata
        - initial (int): Estado inicial del automata
        - transitions (dict): transiciones del automata
        - finals (list): estados de aceptacion del automata
    '''

    def __init__(
        self,
        estados: list,
        symbols: list,
        initial: int,
        finals: list,
        transitions: dict
    ) -> None:
        super().__init__()
        self.finals: list = finals
        self.estados: list = estados
        self.symbols: list = symbols
        self.initial: int = initial
        self.transitions: dict = transitions

    def simulate(self, c: str) -> bool:
        S: int = self.initial

        for char in c:
            next_state = self.move(S, char)
            if next_state is None:
                return False
            S = next_state

        self.actual_state = S
        return (S in self.finals)

    def __repr__(self) -> str:
        return super().__repr__() + f'''
        Finals: {self.finals}
        '''
class Augmented_AFD(AFD):
    def __init__(
        self,
        estados: list,
        symbols: list,
        initial: int,
        finals: list,
        transitions: dict,
        token_map: dict
    ) -> None:
        super().__init__(estados, symbols, initial, finals, transitions)
        self.token_map = token_map

    def simulate_lexer(self, stream: list[int]) -> list[tuple[str]]:
        S: int = self.initial
        tokens: list = []
        readed_stream = ''

        while len(stream) > 0:
            char = stream.pop(0)
            next_state = self.move(S, char)
            readed_stream += ascii_to_char(char)

            if next_state is None:

                if S in self.finals:
                    readed_stream = readed_stream[:-1]\
                        if len(readed_stream) > 1\
                        else readed_stream[0]

                    token = self.token_map[S]
                    token_founded = [token, readed_stream]
                    tokens.append(token_founded)
                    stream.insert(0, char)

                else:
                    tokens.append([
                        'Lexical ERROR: token not recognized by the languaje',
                        readed_stream + ' ' + str(ord(readed_stream[-1]))
                    ])

                readed_stream = ''
                next_state = self.initial

            S = next_state

        if S in self.finals:
            readed_stream = readed_stream[:-1]\
                if len(readed_stream) > 1\
                else readed_stream[0]

            token = self.token_map[S]
            token_founded = [token, readed_stream]
            tokens.append(token_founded)
            stream.insert(0, char)

        else:
            tokens.append([
                'Lexical ERROR: token not recognized by the languaje',
                readed_stream + ' ' + str(ord(readed_stream[-1]))
            ])

        return tokens

    def __repr__(self) -> str:
        return super().__repr__() + f'''
        Tokens: {self.token_map}
        '''

def ascii_to_char(ascii: int) -> str:
    char = chr(ascii)

    if char == '\n':
        char = '/n'

    elif char == '\t':
        char = '/t'

    return char

afd = Augmented_AFD(
    estados=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],
    symbols=[59, 10, 9, 32, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 122, 97, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 90, 65, 124, 58, 37, 47, 42, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 123, 96, 95, 94, 93, 92, 91, 64, 63, 62, 61, 60, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 46, 45, 44, 43, 41, 40, 39, 38, 36, 35, 34, 33],
    initial=0,
    finals=[1, 14, 19, 26],
    transitions={(0, 10): 1, (0, 9): 1, (0, 32): 1, (0, 121): 2, (0, 120): 2, (0, 119): 2, (0, 118): 2, (0, 117): 2, (0, 116): 2, (0, 115): 2, (0, 114): 2, (0, 113): 2, (0, 112): 2, (0, 111): 2, (0, 110): 2, (0, 109): 2, (0, 108): 2, (0, 107): 2, (0, 106): 2, (0, 105): 2, (0, 104): 2, (0, 103): 2, (0, 102): 2, (0, 101): 2, (0, 100): 2, (0, 99): 2, (0, 98): 2, (0, 122): 2, (0, 97): 2, (0, 37): 3, (0, 47): 4, (1, 10): 1, (1, 9): 1, (1, 32): 1, (2, 121): 2, (2, 120): 2, (2, 119): 2, (2, 118): 2, (2, 117): 2, (2, 116): 2, (2, 115): 2, (2, 114): 2, (2, 113): 2, (2, 112): 2, (2, 111): 2, (2, 110): 2, (2, 109): 2, (2, 108): 2, (2, 107): 2, (2, 106): 2, (2, 105): 2, (2, 104): 2, (2, 103): 2, (2, 102): 2, (2, 101): 2, (2, 100): 2, (2, 99): 2, (2, 98): 2, (2, 122): 2, (2, 97): 2, (2, 58): 5, (3, 116): 6, (4, 42): 7, (5, 10): 8, (5, 9): 8, (5, 32): 8, (6, 111): 9, (7, 59): 7, (7, 32): 7, (7, 121): 7, (7, 120): 7, (7, 119): 7, (7, 118): 7, (7, 117): 7, (7, 116): 7, (7, 115): 7, (7, 114): 7, (7, 113): 7, (7, 112): 7, (7, 111): 7, (7, 110): 7, (7, 109): 7, (7, 108): 7, (7, 107): 7, (7, 106): 7, (7, 105): 7, (7, 104): 7, (7, 103): 7, (7, 102): 7, (7, 101): 7, (7, 100): 7, (7, 99): 7, (7, 98): 7, (7, 122): 7, (7, 97): 7, (7, 89): 7, (7, 88): 7, (7, 87): 7, (7, 86): 7, (7, 85): 7, (7, 84): 7, (7, 83): 7, (7, 82): 7, (7, 81): 7, (7, 80): 7, (7, 79): 7, (7, 78): 7, (7, 77): 7, (7, 76): 7, (7, 75): 7, (7, 74): 7, (7, 73): 7, (7, 72): 7, (7, 71): 7, (7, 70): 7, (7, 69): 7, (7, 68): 7, (7, 67): 7, (7, 66): 7, (7, 90): 7, (7, 65): 7, (7, 124): 7, (7, 58): 7, (7, 37): 7, (7, 47): 7, (7, 42): 10, (7, 199): 7, (7, 198): 7, (7, 197): 7, (7, 196): 7, (7, 195): 7, (7, 194): 7, (7, 193): 7, (7, 192): 7, (7, 191): 7, (7, 190): 7, (7, 189): 7, (7, 188): 7, (7, 187): 7, (7, 186): 7, (7, 185): 7, (7, 184): 7, (7, 183): 7, (7, 182): 7, (7, 181): 7, (7, 180): 7, (7, 179): 7, (7, 178): 7, (7, 177): 7, (7, 176): 7, (7, 175): 7, (7, 174): 7, (7, 173): 7, (7, 172): 7, (7, 171): 7, (7, 170): 7, (7, 169): 7, (7, 168): 7, (7, 167): 7, (7, 166): 7, (7, 165): 7, (7, 164): 7, (7, 163): 7, (7, 162): 7, (7, 161): 7, (7, 160): 7, (7, 159): 7, (7, 158): 7, (7, 157): 7, (7, 156): 7, (7, 155): 7, (7, 154): 7, (7, 153): 7, (7, 152): 7, (7, 151): 7, (7, 150): 7, (7, 149): 7, (7, 148): 7, (7, 147): 7, (7, 146): 7, (7, 145): 7, (7, 144): 7, (7, 143): 7, (7, 142): 7, (7, 141): 7, (7, 140): 7, (7, 139): 7, (7, 138): 7, (7, 137): 7, (7, 136): 7, (7, 135): 7, (7, 134): 7, (7, 133): 7, (7, 132): 7, (7, 131): 7, (7, 130): 7, (7, 129): 7, (7, 128): 7, (7, 127): 7, (7, 126): 7, (7, 125): 7, (7, 123): 7, (7, 96): 7, (7, 95): 7, (7, 94): 7, (7, 93): 7, (7, 92): 7, (7, 91): 7, (7, 64): 7, (7, 63): 7, (7, 62): 7, (7, 61): 7, (7, 60): 7, (7, 57): 7, (7, 56): 7, (7, 55): 7, (7, 54): 7, (7, 53): 7, (7, 52): 7, (7, 51): 7, (7, 50): 7, (7, 49): 7, (7, 48): 7, (7, 46): 7, (7, 45): 7, (7, 44): 7, (7, 43): 7, (7, 41): 7, (7, 40): 7, (7, 39): 7, (7, 38): 7, (7, 36): 7, (7, 35): 7, (7, 34): 7, (7, 33): 7, (8, 10): 8, (8, 9): 8, (8, 32): 8, (8, 121): 11, (8, 120): 11, (8, 119): 11, (8, 118): 11, (8, 117): 11, (8, 116): 11, (8, 115): 11, (8, 114): 11, (8, 113): 11, (8, 112): 11, (8, 111): 11, (8, 110): 11, (8, 109): 11, (8, 108): 11, (8, 107): 11, (8, 106): 11, (8, 105): 11, (8, 104): 11, (8, 103): 11, (8, 102): 11, (8, 101): 11, (8, 100): 11, (8, 99): 11, (8, 98): 11, (8, 122): 11, (8, 97): 11, (8, 89): 12, (8, 88): 12, (8, 87): 12, (8, 86): 12, (8, 85): 12, (8, 84): 12, (8, 83): 12, (8, 82): 12, (8, 81): 12, (8, 80): 12, (8, 79): 12, (8, 78): 12, (8, 77): 12, (8, 76): 12, (8, 75): 12, (8, 74): 12, (8, 73): 12, (8, 72): 12, (8, 71): 12, (8, 70): 12, (8, 69): 12, (8, 68): 12, (8, 67): 12, (8, 66): 12, (8, 90): 12, (8, 65): 12, (9, 107): 13, (10, 59): 7, (10, 32): 7, (10, 121): 7, (10, 120): 7, (10, 119): 7, (10, 118): 7, (10, 117): 7, (10, 116): 7, (10, 115): 7, (10, 114): 7, (10, 113): 7, (10, 112): 7, (10, 111): 7, (10, 110): 7, (10, 109): 7, (10, 108): 7, (10, 107): 7, (10, 106): 7, (10, 105): 7, (10, 104): 7, (10, 103): 7, (10, 102): 7, (10, 101): 7, (10, 100): 7, (10, 99): 7, (10, 98): 7, (10, 122): 7, (10, 97): 7, (10, 89): 7, (10, 88): 7, (10, 87): 7, (10, 86): 7, (10, 85): 7, (10, 84): 7, (10, 83): 7, (10, 82): 7, (10, 81): 7, (10, 80): 7, (10, 79): 7, (10, 78): 7, (10, 77): 7, (10, 76): 7, (10, 75): 7, (10, 74): 7, (10, 73): 7, (10, 72): 7, (10, 71): 7, (10, 70): 7, (10, 69): 7, (10, 68): 7, (10, 67): 7, (10, 66): 7, (10, 90): 7, (10, 65): 7, (10, 124): 7, (10, 58): 7, (10, 37): 7, (10, 47): 14, (10, 42): 10, (10, 199): 7, (10, 198): 7, (10, 197): 7, (10, 196): 7, (10, 195): 7, (10, 194): 7, (10, 193): 7, (10, 192): 7, (10, 191): 7, (10, 190): 7, (10, 189): 7, (10, 188): 7, (10, 187): 7, (10, 186): 7, (10, 185): 7, (10, 184): 7, (10, 183): 7, (10, 182): 7, (10, 181): 7, (10, 180): 7, (10, 179): 7, (10, 178): 7, (10, 177): 7, (10, 176): 7, (10, 175): 7, (10, 174): 7, (10, 173): 7, (10, 172): 7, (10, 171): 7, (10, 170): 7, (10, 169): 7, (10, 168): 7, (10, 167): 7, (10, 166): 7, (10, 165): 7, (10, 164): 7, (10, 163): 7, (10, 162): 7, (10, 161): 7, (10, 160): 7, (10, 159): 7, (10, 158): 7, (10, 157): 7, (10, 156): 7, (10, 155): 7, (10, 154): 7, (10, 153): 7, (10, 152): 7, (10, 151): 7, (10, 150): 7, (10, 149): 7, (10, 148): 7, (10, 147): 7, (10, 146): 7, (10, 145): 7, (10, 144): 7, (10, 143): 7, (10, 142): 7, (10, 141): 7, (10, 140): 7, (10, 139): 7, (10, 138): 7, (10, 137): 7, (10, 136): 7, (10, 135): 7, (10, 134): 7, (10, 133): 7, (10, 132): 7, (10, 131): 7, (10, 130): 7, (10, 129): 7, (10, 128): 7, (10, 127): 7, (10, 126): 7, (10, 125): 7, (10, 123): 7, (10, 96): 7, (10, 95): 7, (10, 94): 7, (10, 93): 7, (10, 92): 7, (10, 91): 7, (10, 64): 7, (10, 63): 7, (10, 62): 7, (10, 61): 7, (10, 60): 7, (10, 57): 7, (10, 56): 7, (10, 55): 7, (10, 54): 7, (10, 53): 7, (10, 52): 7, (10, 51): 7, (10, 50): 7, (10, 49): 7, (10, 48): 7, (10, 46): 7, (10, 45): 7, (10, 44): 7, (10, 43): 7, (10, 41): 7, (10, 40): 7, (10, 39): 7, (10, 38): 7, (10, 36): 7, (10, 35): 7, (10, 34): 7, (10, 33): 7, (11, 10): 15, (11, 9): 15, (11, 32): 15, (11, 121): 11, (11, 120): 11, (11, 119): 11, (11, 118): 11, (11, 117): 11, (11, 116): 11, (11, 115): 11, (11, 114): 11, (11, 113): 11, (11, 112): 11, (11, 111): 11, (11, 110): 11, (11, 109): 11, (11, 108): 11, (11, 107): 11, (11, 106): 11, (11, 105): 11, (11, 104): 11, (11, 103): 11, (11, 102): 11, (11, 101): 11, (11, 100): 11, (11, 99): 11, (11, 98): 11, (11, 122): 11, (11, 97): 11, (12, 10): 15, (12, 9): 15, (12, 32): 15, (12, 89): 12, (12, 88): 12, (12, 87): 12, (12, 86): 12, (12, 85): 12, (12, 84): 12, (12, 83): 12, (12, 82): 12, (12, 81): 12, (12, 80): 12, (12, 79): 12, (12, 78): 12, (12, 77): 12, (12, 76): 12, (12, 75): 12, (12, 74): 12, (12, 73): 12, (12, 72): 12, (12, 71): 12, (12, 70): 12, (12, 69): 12, (12, 68): 12, (12, 67): 12, (12, 66): 12, (12, 90): 12, (12, 65): 12, (13, 101): 16, (14, 59): 7, (14, 32): 7, (14, 121): 7, (14, 120): 7, (14, 119): 7, (14, 118): 7, (14, 117): 7, (14, 116): 7, (14, 115): 7, (14, 114): 7, (14, 113): 7, (14, 112): 7, (14, 111): 7, (14, 110): 7, (14, 109): 7, (14, 108): 7, (14, 107): 7, (14, 106): 7, (14, 105): 7, (14, 104): 7, (14, 103): 7, (14, 102): 7, (14, 101): 7, (14, 100): 7, (14, 99): 7, (14, 98): 7, (14, 122): 7, (14, 97): 7, (14, 89): 7, (14, 88): 7, (14, 87): 7, (14, 86): 7, (14, 85): 7, (14, 84): 7, (14, 83): 7, (14, 82): 7, (14, 81): 7, (14, 80): 7, (14, 79): 7, (14, 78): 7, (14, 77): 7, (14, 76): 7, (14, 75): 7, (14, 74): 7, (14, 73): 7, (14, 72): 7, (14, 71): 7, (14, 70): 7, (14, 69): 7, (14, 68): 7, (14, 67): 7, (14, 66): 7, (14, 90): 7, (14, 65): 7, (14, 124): 7, (14, 58): 7, (14, 37): 7, (14, 47): 7, (14, 42): 10, (14, 199): 7, (14, 198): 7, (14, 197): 7, (14, 196): 7, (14, 195): 7, (14, 194): 7, (14, 193): 7, (14, 192): 7, (14, 191): 7, (14, 190): 7, (14, 189): 7, (14, 188): 7, (14, 187): 7, (14, 186): 7, (14, 185): 7, (14, 184): 7, (14, 183): 7, (14, 182): 7, (14, 181): 7, (14, 180): 7, (14, 179): 7, (14, 178): 7, (14, 177): 7, (14, 176): 7, (14, 175): 7, (14, 174): 7, (14, 173): 7, (14, 172): 7, (14, 171): 7, (14, 170): 7, (14, 169): 7, (14, 168): 7, (14, 167): 7, (14, 166): 7, (14, 165): 7, (14, 164): 7, (14, 163): 7, (14, 162): 7, (14, 161): 7, (14, 160): 7, (14, 159): 7, (14, 158): 7, (14, 157): 7, (14, 156): 7, (14, 155): 7, (14, 154): 7, (14, 153): 7, (14, 152): 7, (14, 151): 7, (14, 150): 7, (14, 149): 7, (14, 148): 7, (14, 147): 7, (14, 146): 7, (14, 145): 7, (14, 144): 7, (14, 143): 7, (14, 142): 7, (14, 141): 7, (14, 140): 7, (14, 139): 7, (14, 138): 7, (14, 137): 7, (14, 136): 7, (14, 135): 7, (14, 134): 7, (14, 133): 7, (14, 132): 7, (14, 131): 7, (14, 130): 7, (14, 129): 7, (14, 128): 7, (14, 127): 7, (14, 126): 7, (14, 125): 7, (14, 123): 7, (14, 96): 7, (14, 95): 7, (14, 94): 7, (14, 93): 7, (14, 92): 7, (14, 91): 7, (14, 64): 7, (14, 63): 7, (14, 62): 7, (14, 61): 7, (14, 60): 7, (14, 57): 7, (14, 56): 7, (14, 55): 7, (14, 54): 7, (14, 53): 7, (14, 52): 7, (14, 51): 7, (14, 50): 7, (14, 49): 7, (14, 48): 7, (14, 46): 7, (14, 45): 7, (14, 44): 7, (14, 43): 7, (14, 41): 7, (14, 40): 7, (14, 39): 7, (14, 38): 7, (14, 36): 7, (14, 35): 7, (14, 34): 7, (14, 33): 7, (15, 10): 17, (15, 9): 17, (15, 32): 17, (15, 121): 11, (15, 120): 11, (15, 119): 11, (15, 118): 11, (15, 117): 11, (15, 116): 11, (15, 115): 11, (15, 114): 11, (15, 113): 11, (15, 112): 11, (15, 111): 11, (15, 110): 11, (15, 109): 11, (15, 108): 11, (15, 107): 11, (15, 106): 11, (15, 105): 11, (15, 104): 11, (15, 103): 11, (15, 102): 11, (15, 101): 11, (15, 100): 11, (15, 99): 11, (15, 98): 11, (15, 122): 11, (15, 97): 11, (15, 89): 12, (15, 88): 12, (15, 87): 12, (15, 86): 12, (15, 85): 12, (15, 84): 12, (15, 83): 12, (15, 82): 12, (15, 81): 12, (15, 80): 12, (15, 79): 12, (15, 78): 12, (15, 77): 12, (15, 76): 12, (15, 75): 12, (15, 74): 12, (15, 73): 12, (15, 72): 12, (15, 71): 12, (15, 70): 12, (15, 69): 12, (15, 68): 12, (15, 67): 12, (15, 66): 12, (15, 90): 12, (15, 65): 12, (16, 110): 18, (17, 59): 19, (17, 10): 17, (17, 9): 17, (17, 32): 17, (17, 121): 11, (17, 120): 11, (17, 119): 11, (17, 118): 11, (17, 117): 11, (17, 116): 11, (17, 115): 11, (17, 114): 11, (17, 113): 11, (17, 112): 11, (17, 111): 11, (17, 110): 11, (17, 109): 11, (17, 108): 11, (17, 107): 11, (17, 106): 11, (17, 105): 11, (17, 104): 11, (17, 103): 11, (17, 102): 11, (17, 101): 11, (17, 100): 11, (17, 99): 11, (17, 98): 11, (17, 122): 11, (17, 97): 11, (17, 89): 12, (17, 88): 12, (17, 87): 12, (17, 86): 12, (17, 85): 12, (17, 84): 12, (17, 83): 12, (17, 82): 12, (17, 81): 12, (17, 80): 12, (17, 79): 12, (17, 78): 12, (17, 77): 12, (17, 76): 12, (17, 75): 12, (17, 74): 12, (17, 73): 12, (17, 72): 12, (17, 71): 12, (17, 70): 12, (17, 69): 12, (17, 68): 12, (17, 67): 12, (17, 66): 12, (17, 90): 12, (17, 65): 12, (17, 124): 20, (18, 10): 21, (18, 9): 21, (18, 32): 21, (20, 10): 22, (20, 9): 22, (20, 32): 22, (21, 10): 21, (21, 9): 21, (21, 32): 21, (21, 89): 23, (21, 88): 23, (21, 87): 23, (21, 86): 23, (21, 85): 23, (21, 84): 23, (21, 83): 23, (21, 82): 23, (21, 81): 23, (21, 80): 23, (21, 79): 23, (21, 78): 23, (21, 77): 23, (21, 76): 23, (21, 75): 23, (21, 74): 23, (21, 73): 23, (21, 72): 23, (21, 71): 23, (21, 70): 23, (21, 69): 23, (21, 68): 23, (21, 67): 23, (21, 66): 23, (21, 90): 23, (21, 65): 23, (22, 121): 24, (22, 120): 24, (22, 119): 24, (22, 118): 24, (22, 117): 24, (22, 116): 24, (22, 115): 24, (22, 114): 24, (22, 113): 24, (22, 112): 24, (22, 111): 24, (22, 110): 24, (22, 109): 24, (22, 108): 24, (22, 107): 24, (22, 106): 24, (22, 105): 24, (22, 104): 24, (22, 103): 24, (22, 102): 24, (22, 101): 24, (22, 100): 24, (22, 99): 24, (22, 98): 24, (22, 122): 24, (22, 97): 24, (22, 89): 25, (22, 88): 25, (22, 87): 25, (22, 86): 25, (22, 85): 25, (22, 84): 25, (22, 83): 25, (22, 82): 25, (22, 81): 25, (22, 80): 25, (22, 79): 25, (22, 78): 25, (22, 77): 25, (22, 76): 25, (22, 75): 25, (22, 74): 25, (22, 73): 25, (22, 72): 25, (22, 71): 25, (22, 70): 25, (22, 69): 25, (22, 68): 25, (22, 67): 25, (22, 66): 25, (22, 90): 25, (22, 65): 25, (23, 10): 26, (23, 9): 26, (23, 32): 26, (23, 89): 23, (23, 88): 23, (23, 87): 23, (23, 86): 23, (23, 85): 23, (23, 84): 23, (23, 83): 23, (23, 82): 23, (23, 81): 23, (23, 80): 23, (23, 79): 23, (23, 78): 23, (23, 77): 23, (23, 76): 23, (23, 75): 23, (23, 74): 23, (23, 73): 23, (23, 72): 23, (23, 71): 23, (23, 70): 23, (23, 69): 23, (23, 68): 23, (23, 67): 23, (23, 66): 23, (23, 90): 23, (23, 65): 23, (24, 10): 27, (24, 9): 27, (24, 32): 27, (24, 121): 24, (24, 120): 24, (24, 119): 24, (24, 118): 24, (24, 117): 24, (24, 116): 24, (24, 115): 24, (24, 114): 24, (24, 113): 24, (24, 112): 24, (24, 111): 24, (24, 110): 24, (24, 109): 24, (24, 108): 24, (24, 107): 24, (24, 106): 24, (24, 105): 24, (24, 104): 24, (24, 103): 24, (24, 102): 24, (24, 101): 24, (24, 100): 24, (24, 99): 24, (24, 98): 24, (24, 122): 24, (24, 97): 24, (25, 10): 27, (25, 9): 27, (25, 32): 27, (25, 89): 25, (25, 88): 25, (25, 87): 25, (25, 86): 25, (25, 85): 25, (25, 84): 25, (25, 83): 25, (25, 82): 25, (25, 81): 25, (25, 80): 25, (25, 79): 25, (25, 78): 25, (25, 77): 25, (25, 76): 25, (25, 75): 25, (25, 74): 25, (25, 73): 25, (25, 72): 25, (25, 71): 25, (25, 70): 25, (25, 69): 25, (25, 68): 25, (25, 67): 25, (25, 66): 25, (25, 90): 25, (25, 65): 25, (26, 10): 26, (26, 9): 26, (26, 32): 26, (26, 89): 23, (26, 88): 23, (26, 87): 23, (26, 86): 23, (26, 85): 23, (26, 84): 23, (26, 83): 23, (26, 82): 23, (26, 81): 23, (26, 80): 23, (26, 79): 23, (26, 78): 23, (26, 77): 23, (26, 76): 23, (26, 75): 23, (26, 74): 23, (26, 73): 23, (26, 72): 23, (26, 71): 23, (26, 70): 23, (26, 69): 23, (26, 68): 23, (26, 67): 23, (26, 66): 23, (26, 90): 23, (26, 65): 23, (27, 59): 19, (27, 10): 27, (27, 9): 27, (27, 32): 27, (27, 121): 24, (27, 120): 24, (27, 119): 24, (27, 118): 24, (27, 117): 24, (27, 116): 24, (27, 115): 24, (27, 114): 24, (27, 113): 24, (27, 112): 24, (27, 111): 24, (27, 110): 24, (27, 109): 24, (27, 108): 24, (27, 107): 24, (27, 106): 24, (27, 105): 24, (27, 104): 24, (27, 103): 24, (27, 102): 24, (27, 101): 24, (27, 100): 24, (27, 99): 24, (27, 98): 24, (27, 122): 24, (27, 97): 24, (27, 89): 25, (27, 88): 25, (27, 87): 25, (27, 86): 25, (27, 85): 25, (27, 84): 25, (27, 83): 25, (27, 82): 25, (27, 81): 25, (27, 80): 25, (27, 79): 25, (27, 78): 25, (27, 77): 25, (27, 76): 25, (27, 75): 25, (27, 74): 25, (27, 73): 25, (27, 72): 25, (27, 71): 25, (27, 70): 25, (27, 69): 25, (27, 68): 25, (27, 67): 25, (27, 66): 25, (27, 90): 25, (27, 65): 25, (27, 124): 20},
    token_map={1: '', 14: '', 19: 'PRODUCTION', 26: 'TOKEN'}
)

def read_tokens(filepath: str) -> list:

    file = open(filepath)
    stream = file.read()
    file.close()
    stream = [ord(char) for char in stream]

    tokens = afd.simulate_lexer(stream)

    f = open("./out/tokens.txt", "w")
    ws = '\n'
    for token in tokens:
        f.write(str(token))
        f.write(ws)
    f.close()
    return tokens


import sys

if __name__ == '__main__':
    if len(sys.argv) < 2:
        raise Exception('Input File Missing for Lexical Analysis')

    filepath = sys.argv[1]

    file = open(filepath)
    stream = file.read()
    file.close()
    stream = [ord(char) for char in stream]

    tokens = afd.simulate_lexer(stream)

    f = open("./out/tokens.txt", "w")
    ws = '\n'
    for token in tokens:
        f.write(str(token))
        f.write(ws)
    f.close()
    print('Token founded written in ./out.tokens.txt')
